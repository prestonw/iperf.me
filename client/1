<!doctype html>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>iperf.me â€” MVP</title>
<link rel="stylesheet" href="https://unpkg.com/xterm@5.3.0/css/xterm.css">
<style>
  body { margin:0; background:#0b0e12; color:#e6edf3; font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }
  header { padding:12px 16px; border-bottom:1px solid #1d2633; display:flex; gap:12px; align-items:center;}
  .badge { background:#142033; padding:4px 8px; border-radius:6px; font-size:12px; color:#a5b4c4; }
  #terminal { height: calc(100vh - 54px); }
  a { color:#69b8ff; text-decoration:none; }
  a:hover { text-decoration:underline; }
  .sep { opacity:.5; }
</style>
<header>
  <strong>iperf.me</strong>
  <span class="sep">|</span>
  <span class="badge">MVP (edge-friendly, iPerf-style)</span>
  <span style="margin-left:auto;font-size:12px;">Inspired by iPerf3 (BSD, ESnet). Not affiliated.</span>
</header>
<div id="terminal"></div>

<script src="https://unpkg.com/xterm@5.3.0/lib/xterm.js"></script>
<script>
let WORKER = 'https://edge.iperf.me';

// Allow override via URL param (?worker=https://...)
try {
  const u = new URL(window.location.href);
  const o = u.searchParams.get('worker');
  if (o) WORKER = o;
} catch(e){}

// --- Terminal ---
const term = new Terminal({theme:{background:'#0b0e12'}});
term.open(document.getElementById('terminal'));

function line(s){ term.writeln(s); }
function pad(n, width){ n = String(n); return n.length>=width ? n : ' '.repeat(width-n.length)+n; }

async function runOnce(dir, sizeMB=10){
  const bytes = sizeMB * 1024 * 1024;
  const start = performance.now();
  if(dir === 'upload'){
    const payload = new Uint8Array(bytes);
    crypto.getRandomValues(payload);
    await fetch(WORKER + '/upload', { method:'POST', body: payload });
  } else {
    const r = await fetch(WORKER + '/download?bytes=' + bytes);
    await r.arrayBuffer();
  }
  const dur = (performance.now() - start) / 1000;
  const mbps = (bytes*8/1e6)/dur;
  const hdr = dir==='upload' ? 'sender' : 'receiver';
  const mb = (bytes/1e6).toFixed(2);
  line(`[SUM]  0.00-${dur.toFixed(2)} sec  ${pad(mb,8)} MBytes  ${pad(mbps.toFixed(2),8)} Mbits/sec  ${hdr}`);
  return {dur, mbps, bytes};
}

(async()=>{
  line('$ iperf3 -c edge-auto -t 10 -P 2');
  line('[ ID]   Interval         Transfer     Bitrate        ');
  line('[SUM]   0.00-?           (calculating)');
  try {
    line('> Starting 10 MB upload test...');
    await runOnce('upload', 10);
    line('> Starting 10 MB download test...');
    await runOnce('download', 10);
    line('> Done.');
    line('This MVP is open-source and iPerf-inspired. Edit size via code; pro mode can add streams & WT/QUIC later.');
  } catch (e) {
    line('Error: ' + (e && e.message ? e.message : e));
  }
})();
</script>
